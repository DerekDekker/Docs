减少重复代码    扩展性    易读性



----------------------------------------------------------------------------- 类定义
class MyClass(object):
	//全部对象共有属性 MyClass.共有属性 被修改全部的对象共有属性都会被修改
    共有属性 = 值 

    //构造方法
    def __init__(self,参数...):		实例化时被自动调用,可以接受实例化时的参数

        //属性
        self.名称 = 参数1

        //私有属性
        self._名称 = 参数2
    
    //类的方法
    def 名称(self,参数...):
        '''
        文档
        '''
        pass

    //私有方法
    def _名称(self,参数...):
        pass


继承,多重继承
class MyJc(父类..):

    //子类构造方法
    def __init__(self,参数...):
        super().__init__(参数...)        一个继承可以使用
        父类.__init__(self,参数...)	可以把子类值传递给父类

    //多态
    def 名称(self,参数...):		重写父类方法
        pass


==================================== 私有属性 私有方法
__变量 强制私有
_变量  私有

def __方法(self):  强制私有
def _方法(self):   私有


==================================== 多态
重写 父类方法 或 属性

子类 属性名 或 方法名 和 父类 名称 一样 实现重写


==================================== @
@property
方法可以像变量一样被调用

@company_info.setter
def company_info(self, 参数)
方法可以像变量一样被赋值
方法名称.setter = 直 


-----------------------------------------------------------------------------实例化
类的实例化
实例 = 类(参数...)

实例 = 类(**字典)

类的方法调用
实例.方法(参数...)

类的属性调用
实例.属性

============================封装
def 封装(参数...):
    参数.方法()

封装(实例)

============================添加属性
实例.变量 = 值
变量 是不存在的变量

-----------------------------------------------------------------------------类的专用方法
可以直接调用对象执行里面内容, 名称1() 
def __call__(self,参数...):
    pass

print打印类会执行里面内容 并且会 返回内容
def __str__(self):
    return 返回内容

-----------------------------------------------------------------------------__getitem__
def __getitem__(self, 变量):

对象[值]

会访问到这个方法, 可以实现迭代功能







